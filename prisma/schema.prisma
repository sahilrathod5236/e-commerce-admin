// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  userId String

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  storeId  String @db.ObjectId
  label    String
  imageUrl String

  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String @db.ObjectId
  billboardId String @db.ObjectId
  name        String

  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products  Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Size {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  name    String
  value   String

  store    Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  name    String
  value   String

  store    Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  price      String
  storeId    String @db.ObjectId
  categoryId String @db.ObjectId
  sizeId     String  @db.ObjectId
  colorId    String  @db.ObjectId
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  url       String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  storeId String  @db.ObjectId
  isPaid  Boolean @default(false)
  phone   String  @default("")
  address String  @default("")

  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
